name: CI-CD - Matrix Build and Test with Deployment

on:
  push:
    branches: [sub-main]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: "Target environment staging"
        required: true
        default: "staging"
      dry_run:
        description: "Simulate deployment (true/false)"
        required: false
        default: "false"

permissions:
 contents: write

jobs:
  Build-Test-Deploy:
    runs-on: ubuntu-latest
    environment:
      name: ${{ github.event.inputs.environment }} 
    strategy:
      matrix:
        nginx_version: [alpine, 1.25]

    steps:
      
      - name: Install dependencies
        run: |
          if [ -f package.json ]; then
            npm ci
          else
            echo "No dependencies to install"
          fi

      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  
 
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

	
      - name: Build Docker image with NGINX ${{ matrix.nginx_version }}
        run: |
          docker build \
            --build-arg NGINX_VERSION=${{ matrix.nginx_version }} \
            -t gamingecsite:${{ matrix.nginx_version }} \
            -f ./Dockerfile .


      - name: Test container
        run: |
          docker run -d -p 5050:80 --name test gamingecsite:${{ matrix.nginx_version }}
          sleep 1
          curl -f http://localhost:5050
          docker stop test

      - name: Build and Tag Image
        if: github.event.inputs.dry_run != 'true'
        run: |
       
           IMAGE_TAG="${{ github.event.inputs.environment || 'staging' }}"
           echo "Using tag: $IMAGE_TAG"
           docker build -t ${{ secrets.DOCKER_USERNAME }}/gamingecsite:$IMAGE_TAG .
           echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV


      - name: Push Image
        if: github.event.inputs.dry_run != 'true'
        run: docker push ${{ secrets.DOCKER_USERNAME }}/gamingecsite:${{ env.IMAGE_TAG }}
     

      - name: Create Git Tag
        if: github.event.inputs.dry_run != 'true'
        run: |
          git config user.name "nissimdoron"
          git config user.email "nisko39@gmail.com"
          git tag ${{ env.IMAGE_TAG }}
          git push origin ${{ env.IMAGE_TAG }}

      - name: Create GitHub Release
        if: github.event.inputs.dry_run != 'true'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.IMAGE_TAG }}
          name: "Release ${{ env.IMAGE_TAG }}"
          body: "Automated release for environment: ${{ github.event.inputs.environment }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Notify Webhook
        if: github.event.inputs.dry_run != 'true'
        run: |
          curl -X POST -H "Content-Type: application/json" \
            -d "{\"text\": \"Deployed to ${{ github.event.inputs.environment }} with tag: ${{ env.IMAGE_TAG }}\"}" \
            ${{ secrets.DEPLOYMENT_WEBHOOK }}
